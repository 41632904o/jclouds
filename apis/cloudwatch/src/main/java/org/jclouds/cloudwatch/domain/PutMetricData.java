/**
 * Licensed to jclouds, Inc. (jclouds) under one or more
 * contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  jclouds licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.jclouds.cloudwatch.domain;

import com.google.common.annotations.Beta;
import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;

import java.util.Set;

/**
 * Options use to get statistics for the specified metric.
 *
 * @see <a href="http://docs.amazonwebservices.com/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html" />
 *
 * @author Jeremy Whitlock
 */
@Beta
public class PutMetricData {

   private final String namespace;
   private final Set<MetricDatum> metricData;

   /**
    * Private constructor to enforce using {@link Builder}.
    */
   private PutMetricData(String namespace, Set<MetricDatum> metricData) {
      this.namespace = namespace;
      this.metricData = metricData;
   }

   /**
    * return the namespace for this request
    */
   public String getNamespace() {
      return namespace;
   }

   /**
    * return the metric data for this request
    */
   public Set<MetricDatum> getMetricData() {
      return metricData;
   }

   /**
    * Returns a new builder. The generated builder is equivalent to the builder
    * created by the {@link Builder} constructor.
    */
   public static Builder builder() {
      return new Builder();
   }

   public static class Builder {

      private String namespace;
      private Set<MetricDatum> metricData = Sets.newLinkedHashSet();

      /**
       * Creates a new builder. The returned builder is equivalent to the builder
       * generated by {@link org.jclouds.cloudwatch.domain.PutMetricData#builder}.
       */
      public Builder() {}

      /**
       * The namespace for the metric data.  (Should be called once.  Subsequent calls will overwrite the previous
       * value.)  This value <b>cannot</b> start with "AWS/" as that namespace prefix is reserved for AWS CloudWatch
       * metrics.
       *
       * @param namespace the namespace for the metric data
       *
       * @return this {@code Builder} object
       *
       * @throws NullPointerException if namespace is null
       * @throws IllegalArgumentException if namespace is empty or starts with "AWS/"
       */
      public Builder namespace(String namespace) {
         Preconditions.checkNotNull(namespace, "namespace cannot be null.");
         Preconditions.checkArgument(namespace.length() > 1, "namespace must not be empty.");
         Preconditions.checkArgument(!namespace.startsWith("AWS/"), "namespace cannot start with 'AWS/' as it's " +
               "reserved for AWS CloudWatch metrics.");
         this.namespace = namespace;
         return this;
      }

      /**
       * A metric to either create or aggregate to an existing metric.  (Can be called multiple times up to a maximum of
       * 10 times.)
       *
       * @param metricDatum the representation of a metric to either create a new metric or add new values to be
       *                    aggregated into an existing metric
       *
       * @return this {@code Builder} object
       *
       * @throws IllegalArgumentException if the number of dimensions would be greater than 10 after adding
       */
      public Builder metricDatum(MetricDatum metricDatum) {
         if (metricDatum != null) {
            Preconditions.checkArgument(metricData.size() < 10, "metric data member maximum count of 10 exceeded.");
            this.metricData.add(metricDatum);
         }
         return this;
      }

      /**
       * A list of data describing the metric.  (Set can be 10 or less items.)
       *
       * @param metricData the list of data describing the data
       *
       * @return this {@code Builder} object
       *
       * @throws IllegalArgumentException if the passed in data has more than 10 members
       */
      public Builder metricData(Set<MetricDatum> metricData) {
         if (metricData != null) {
            Preconditions.checkArgument(metricData.size() <= 10, "metric data can have 10 or fewer members.");
            this.metricData = metricData;
         }
         return this;
      }

      /**
       * Returns a newly-created {@code PutMetricData} based on the contents of the {@code Builder}.
       *
       * @throws NullPointerException if any of the required fields are null
       * @throws IllegalArgumentException if any of the provided fields don't meet required criteria
       */
      public PutMetricData build() {
         Preconditions.checkNotNull(namespace, "namespace cannot be null.");
         Preconditions.checkNotNull(metricData, "metricData cannot be null.");
         Preconditions.checkArgument(metricData.size() > 0, "metricData must have at least one member.");

         return new PutMetricData(namespace, metricData);
      }

   }

}
